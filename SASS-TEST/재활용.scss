//재활용(Mixins)
//정의(선언하기) : mixin  사용(포함하기) : includ
//Sass Mixins는 스타일 시트 전체에서 재사용 할 CSs 선언 그룹을 정의

//mixin선언
@mixin size($w: 100px, $h: 100px){  //밖에서 들어오는 값이 없을 경우 기본값이 정의된다
    //재활용할 코드
    width: $w;
    height: $h;
}

.box1{
    @include size;
}
.box2{
    @include size($h: 200px);   //특정값을 넣어 기본값을 안사용할 수 있음
}
.box3{
    @include size;
}



//@mixin
/*
SCSS 
@mixin 믹스인이름{
    스타일;
}

Sass
=믹스인이름
    스타일
    //들여쓰기 잘봐라!
*/

//Mixin은 선택자를 포함 가능하고 상위(부모) 요소 참고(& 같은)도 할 수 있음


//@include
/*
SCSS
@include 믹스인이름;
//Sass
+믹스인이름
*/
//예시
/*
SCSS
h1{
    @indluce large-text;
}
div{
    @include large-text;
}

Sass
h1
    +large-text
div
    +large-text
*/









//mixin의 인수(Arguments)(인자 또는 인수라고 부름)
// SCSS
/*
@mixin 믹스인이름($매개변수) {
    스타일;
  }
  @include 믹스인이름(인수);
  
  // Sass
  =믹스인이름($매개변수)
    스타일
  
  +믹스인이름(인수)
*/                        //매개변수(파라미터)
@mixin dash-line($width, $color) {
border: $width dashed $color;
}
                        //인수(자)  순서대로 값을 받음
.box1 { @include dash-line(1px, red); }
.box2 { @include dash-line(4px, blue); }
/*
.box1 {
border: 1px dashed red;
}
.box2 {
border: 4px dashed blue;
}
*/



//인수의 기본값 설정
//인수는 기본값을 가질 수 있다
//@include 포함 단계에서 별도의 인수가 전달되지 않으면 기본값이 사용
/*
@mixin 믹스인이름($매개변수: 기본값) {
    스타일;
  }
*/
@mixin dash-line($width: 1px, $color: black) {
    border: $width dashed $color;
  }
  
  .box1 { @include dash-line; }
  .box2 { @include dash-line(4px); }
/*
.box1 {
  border: 1px dashed black;
}
.box2 {
  border: 4px dashed black;
}
*/





//키워드인수
//인수는 매개변수의 순서대로 값이 들어감. 그러니까 매개변수 순서대로 인수를 넣어줘야함
/*
@mixin 믹스인이름($매개변수A: 기본값, $매개변수B: 기본값) {
  스타일;
}

@include 믹스인이름($매개변수B: 인수);
*/




//가변인수
/*가변 인수(Variable Arguments)
때때로 입력할 인수의 개수가 불확실한 경우
그럴 경우 가변 인수를 사용할 수 있음
가변 인수는 매개변수 뒤에 ...을 붙여줌*/
@mixin var($w, $h, $bg...){ //$gb가 3번째 이후의 것들을 받아줘라 라는 의미로 ...을 붙임
    widtH: $w;
    height: $h;
    background: $bg;
}
.box{
    @include var(100px, 
    200px, 
    url("image/a.png") no-repeat 10px 20px,
    url("image/b.png") no-repeat,
    url("image/.c.png")
    );
}
/*
.box {
  widtH: 100px;
  height: 200px;
  background: url("image/a.png") no-repeat 10px 20px, url("image/b.png") no-repeat, url("image/.c.png");
}
*/



//인수에 ...쓸 때
@mixin font(
  $style: normal,
  $weight: normal,
  $size: 16px,
  $family: sans-serif
) {
  font: {
    style: $style;
    weight: $weight;
    size: $size;
    family: $family;
  }
}
div {
  // 매개변수 순서와 개수에 맞게 전달
  $font-values: italic, bold, 16px, sans-serif;
  @include font($font-values...);
}
span {
  // 필요한 값만 키워드 인수로 변수에 담아 전달
  $font-values: (style: italic, size: 22px);
  @include font($font-values...);
}
a {
  // 필요한 값만 키워드 인수로 전달
  @include font((weight: 900, family: monospace)...);
}
/*
div {
  font-style: italic;
  font-weight: bold;
  font-size: 16px;
  font-family: sans-serif;
}
span {
  font-style: italic;
  font-weight: normal;
  font-size: 22px;
  font-family: sans-serif;
}
a {
  font-style: normal;
  font-weight: 900;
  font-size: 16px;
  font-family: monospace;
}
*/









//@content
/*
@mixin 믹스인이름() {
  스타일;
  @content;
}

@include 믹스인이름() {
  // 스타일 블록
  스타일;
}
*/
@mixin icon($url) {
    &::after {
      content: $url;
      @content;
    }
  }
  .icon1 {
    // icon Mixin의 기존 기능만 사용
    @include icon("/images/icon.png");
  }
  .icon2 {
    // icon Mixin에 스타일 블록을 추가하여 사용
    @include icon("/images/icon.png") {
      display: block;
      position: absolute;
      width: 100px;
      height: 100px;
    };  //이 부분이 @mixin의 @content부분으로 들어감
  }
  /*
  .icon1::after {
  content: "/images/icon.png";
}
.icon2::after {
  content: "/images/icon.png";
  position: absolute;
}
*/

//예시 하나더
$color: red;

@mixin colors($color: blue) {
  // Mixin의 범위
  @content;
  background-color: $color;
  border-color: $color;
}

div {
  @include colors() {
    // 스타일 블록이 정의된 범위
    color: $color;
  }
}
/*
div {
  color: red;
  background-color: blue;
  border-color: blue;
}
*/









//확장(Extend)-Extend라는 지시어를 사용             별로 추천X
//@extend 선택자;

.btn {
    padding: 10px;
    margin: 10px;
    background: blue;
  }
  .btn-danger {
    @extend .btn;
    background: red;
  }

//.btn이 사용했던 속성을 .btn-danger에서 사용할 수 있게 확장하는것
/*
.btn, .btn-danger {             <---확인!
  padding: 10px;
  margin: 10px;
  background: blue;
}
.btn-danger {
  background: red;
}
*/

/* Extend가 비추천인 이유
결과를 보면 ,로 구분하는 다중 선택자(Multiple Selector)가 만들어졌습니다.

사실 @extend는 다음과 같은 문제를 고려해야 합니다.

내 현재 선택자(위 예제의 .btn-danger)가 어디에 첨부될 것인가?
원치 않는 부작용이 초래될 수도 있는가?
이 한 번의 확장으로 얼마나 큰 CSS가 생성되는가?
결과적으로 확장(Extend) 기능은 무해하거나 혹은 유익할 수도 있지만 그만큼 부작용을 가지고 있을 수 있습니다.
따라서 확장은 사용을 권장하지 않으며, 위에서 살펴본 Mixin을 대체 기능으로 사용하세요.

사용을 권장하지 않는 이유에 대해서 좀 더 자세한 정보를 원하면 Sass Guidelines Extend를 참고하세요.
*/